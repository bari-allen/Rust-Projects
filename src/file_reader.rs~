use std::io;
use std::io::BufReader;
use std::fs::File;
use std::io::prelude::*;
use std::io::ErrorKind;
use std::io::Error;


fn create_file() -> Result<(), Error> {
    let mut new_file = File::create("users.csv")?;
    let bytes = "Username, Password".as_bytes();
    let result = new_file.write_all(&bytes);

    return result;
}

fn create_new_user(username: String, password: String) -> Result<(), Error> {
    let mut users = File::open("users.csv").unwrap_or_else(|error| {
	if error.kind() == ErrorKind::NotFound {
	    let err =  create_file();
	    if err.is_err() {
		panic!("Theres a problem creating or writing to user.csv");
	    }
	    
	    return File::open("users.csv").unwrap();
	} else {
	    panic!("There's a problem opening the file: {error:?}");
	}
    });

    return Ok(());
}

fn read_users() -> std::io::Result<Vec<(String, i32)>> {
    let mut users: Vec<(String, i32)> = Vec::new();
    let users_file = File::open("users.csv")?;
    let buf_reader = BufReader::new(users_file);
    

    for line in buf_reader.lines() {
	let line = line?;
	let parts = line.split(",");
	let collection: Vec<&str> = parts.collect();

	if collection.len() != 2 {
	    continue;
	}
	
	let username: String = collection[0].to_string();
	let password: i32 = collection[1].trim()
	    .parse()
	    .map_err(|e| io::Error::new(io::ErrorKind::InvalidData, e))?;

	users.push((username, password));
    }

    return Ok(users); 
}
